import vc_swap as vc
import os
import pandas as pd
import sys
import numpy as np
import re
import logging


os.chdir(r'C:\Temp\coverage_test')

logging.basicConfig(filename=r'logging.txt',
                    level=logging.INFO, format=' %(asctime)s - %(levelname)s - %(message)s')
# 800 - 5 , 1800 - 15, 2100 - 15, 2600 - 10
bands = {
    6413: [6413, 1301, 525, 3300],
    1301: [1301, 525],
    525: [1301, 525],
    3300: [1301, 525, 3300, 1275],
    1275: [3300,1275]
        }

#   198449668 ECI = 256 * eNB ID + Cell ID (Sector ID)
# cells = [7715745] #   198449668 ECI = 256 * eNB ID + Cell ID (Sector ID)
# cells = [5022456] #   128574726 ECI = 256 * eNB ID + Cell ID (Sector ID)

# список сот по которым будем делать расчет
cells
file_date_1 = 'logos4g_cl-23-01_20210528_20210915113935_4G_ATOLL_EXPORT_25x25_v05_mrgps.csv'
file_date_2 = 'logos4g_cl-23-01_20210803_20210915114232_4G_ATOLL_EXPORT_25x25_v05_mrgps.csv'
rsrp_limit_1 = -95      # уровень при котором не считаем покрытие потерянным
rsrp_delta_1 = 3        # дельта при которой считаем покрытие не потеряно
rsrp_limit_2 = -95     # уровень при котором не считаем покрытие не улучшено
rsrp_delta_2 = 3        # дельта при которой считаем покрытие не улучшено

# определяем названия столбцов lat lon так как они меняются из-за бинов
date_1_data = pd.read_csv(file_date_1)
for col in date_1_data.columns:
    if re.search('LONGITUDE_\d\d', col):
        longitude = col
    elif re.search('LATITUDE_\d\d', col):
        latitude = col


def coverage_check_for_cluster():
    """"Эта функция считает покрытие с учетом сторонних band-ов"""
    for cell in cells:
        current_band = 0
        # преобразовываем список сот в формат Geos
        cell_id_geos = (int(str(cell)[:-1]) * 256 + int(str(cell)[-1]))
        # берем координаты точек для первого дня для нашей соты
        date_1_data = pd.read_csv(file_date_1,
                                  usecols=['CELLID_PCELL', 'RSRP_PCELL', 'CARRIER_FREQ', longitude, latitude],
                                  low_memory=False)
        date_1_data_cell = date_1_data[(date_1_data.CELLID_PCELL == cell_id_geos)]
        # определяем частоту нашей соты
        try:
            current_band = int(date_1_data_cell['CARRIER_FREQ'].loc[date_1_data_cell.index.tolist()[0]])
        except (IndexError, ValueError):
            continue
        print(cell)
        # print(date_1_data_cell.info())
        date_1_data_cell = date_1_data_cell[['CELLID_PCELL', 'RSRP_PCELL', longitude, latitude]]

        # берем коодинаты точек и уровень для второго дня
        date_2_data = pd.read_csv(file_date_2,
                                  usecols=['CELLID_PCELL', 'RSRP_PCELL', longitude, latitude],
                                  low_memory=False)
        date_2_data_cell = date_2_data[(date_2_data.CELLID_PCELL == cell_id_geos)]
        # print(date_2_data_cell.head())
        # print(date_2_data_cell.describe())
        # date_2_data_cell.to_csv('21.csv')
        # print('date_2_data_cell:\n')
        # print(date_2_data_cell.info())
        # date_2_data_cell

        # объединяем таблицы между собой:
        dat_1_2 = pd.merge(date_1_data_cell, date_2_data_cell, how="outer", on=['CELLID_PCELL', longitude, latitude])
        # dat_1_2.to_csv('21+15.csv')

        # формируем таблицу с двумя лучшими уровнями для второго дня исключив нашу соту
        bs_data = pd.read_csv(file_date_2,
                              usecols=['CELLID_PCELL', 'RSRP_PCELL', 'CARRIER_FREQ', longitude, latitude],
                              low_memory=False
                              )
        bs_data = bs_data[(bs_data.CARRIER_FREQ != '\\N')]
        bs_data.CARRIER_FREQ = bs_data.CARRIER_FREQ.astype(int)
        bs_data_wo_our_cell_with_band = bs_data[(bs_data.CELLID_PCELL != cell_id_geos)]
        # for index, row in bs_data_wo_our_cell_with_band.iterrows():
        #     text = str(row['CELLID_PCELL']) + ' ' + str(row['CARRIER_FREQ']) + ' ' + str(type(row['CARRIER_FREQ']))
        #     vc.text_to_file('123test.txt', text)
        # sys.exit()
        # bs_data_wo_our_cell_with_band.to_csv('big.csv')

        # оставляем только нужные нам band-ы
        bs_data_wo_our_cell = bs_data_wo_our_cell_with_band.loc[bs_data_wo_our_cell_with_band['CARRIER_FREQ'] != '\\N']
        bs_data_wo_our_cell = bs_data_wo_our_cell_with_band[bs_data_wo_our_cell_with_band['CARRIER_FREQ'].isin(bands[current_band])]
        # print(len(bs_data_wo_our_cell))
        # bs_data_wo_our_cell.to_csv('little.csv')
        # удаляем две колонки
        bs_data_wo_our_cell = bs_data_wo_our_cell.drop(columns=['CELLID_PCELL', 'CARRIER_FREQ'])
        # print(bs_data_wo_our_cell.info())

        # оставляем максимальное значения уровня две колонки
        bs_data_wo_our_cell = bs_data_wo_our_cell.groupby([longitude, latitude]).max()

        # формируем результирующую таблицу
        date_1_2_bs = pd.merge(dat_1_2, bs_data_wo_our_cell, how='left', on=[longitude, latitude])
        date_1_2_bs = date_1_2_bs.rename(columns={'RSRP_PCELL_x': 'RSRP_Day_1', 'RSRP_PCELL_y': 'RSRP_Day_2','RSRP_PCELL': 'RSRP_BS_Another_cell'})
        date_1_2_bs = date_1_2_bs[['CELLID_PCELL', longitude, latitude, 'RSRP_Day_1', 'RSRP_Day_2', 'RSRP_BS_Another_cell']]
        # date_1_2_bs.to_csv('res.csv')

        # create a list of our conditions
        # conditions1 - это условия без учета rsrp_limit rsrp_delta
        conditions1 = [
            (date_1_2_bs['RSRP_Day_1'] > date_1_2_bs['RSRP_Day_2']) & (date_1_2_bs['RSRP_Day_2'] > date_1_2_bs['RSRP_BS_Another_cell']),
            (date_1_2_bs['RSRP_Day_1'] > date_1_2_bs['RSRP_BS_Another_cell']) & (date_1_2_bs['RSRP_BS_Another_cell'] > date_1_2_bs['RSRP_Day_2']),
            (date_1_2_bs['RSRP_Day_2'] > date_1_2_bs['RSRP_Day_1']) & (date_1_2_bs['RSRP_Day_1'] > date_1_2_bs['RSRP_BS_Another_cell']),
            (date_1_2_bs['RSRP_Day_2'] > date_1_2_bs['RSRP_BS_Another_cell']) & (date_1_2_bs['RSRP_BS_Another_cell'] > date_1_2_bs['RSRP_Day_1']),
            (date_1_2_bs['RSRP_Day_1'].isnull()) & (date_1_2_bs['RSRP_Day_2'] > date_1_2_bs['RSRP_BS_Another_cell']),
            (date_1_2_bs['RSRP_Day_1'].isnull()) & (date_1_2_bs['RSRP_Day_2'].notnull()) & (date_1_2_bs['RSRP_BS_Another_cell'].isnull()),
            (date_1_2_bs['RSRP_Day_1'] > date_1_2_bs['RSRP_BS_Another_cell']) & (date_1_2_bs['RSRP_Day_2'].isnull()),
            (date_1_2_bs['RSRP_Day_1'].notnull()) & (date_1_2_bs['RSRP_Day_2'].isnull()) & (date_1_2_bs['RSRP_BS_Another_cell'].isnull()),
            (date_1_2_bs['RSRP_Day_1'] > date_1_2_bs['RSRP_Day_2']) & (date_1_2_bs['RSRP_BS_Another_cell'].isnull()),
            (date_1_2_bs['RSRP_Day_2'] > date_1_2_bs['RSRP_Day_1']) & (date_1_2_bs['RSRP_BS_Another_cell'].isnull()),
            ]
        # conditions2 - это условия c учетом rsrp_limit rsrp_delta
        conditions2 = [
            (date_1_2_bs['RSRP_Day_1'] > date_1_2_bs['RSRP_Day_2'] + rsrp_delta_1) & (date_1_2_bs['RSRP_Day_2'] > date_1_2_bs['RSRP_BS_Another_cell']) & (date_1_2_bs['RSRP_Day_2'] < rsrp_limit_1),
            (date_1_2_bs['RSRP_Day_1'] > date_1_2_bs['RSRP_BS_Another_cell'] + rsrp_delta_1) & (date_1_2_bs['RSRP_BS_Another_cell'] > date_1_2_bs['RSRP_Day_2']) & (date_1_2_bs['RSRP_BS_Another_cell'] < rsrp_limit_1),
            (date_1_2_bs['RSRP_Day_2'] > date_1_2_bs['RSRP_Day_1'] + rsrp_delta_2) & (date_1_2_bs['RSRP_Day_1'] > date_1_2_bs['RSRP_BS_Another_cell']) & (date_1_2_bs['RSRP_Day_1'] < rsrp_limit_2),
            (date_1_2_bs['RSRP_Day_2'] > date_1_2_bs['RSRP_BS_Another_cell'] + rsrp_delta_2) & (date_1_2_bs['RSRP_BS_Another_cell'] > date_1_2_bs['RSRP_Day_1'])& (date_1_2_bs['RSRP_BS_Another_cell'] < rsrp_limit_2),
            (date_1_2_bs['RSRP_Day_1'].isnull()) & (date_1_2_bs['RSRP_Day_2'] > date_1_2_bs['RSRP_BS_Another_cell'] + rsrp_delta_2)& (date_1_2_bs['RSRP_BS_Another_cell'] < rsrp_limit_2),
            (date_1_2_bs['RSRP_Day_1'].isnull()) & (date_1_2_bs['RSRP_Day_2'].notnull()) & (date_1_2_bs['RSRP_BS_Another_cell'].isnull()),
            (date_1_2_bs['RSRP_Day_1'] > date_1_2_bs['RSRP_BS_Another_cell'] + rsrp_delta_1) & (date_1_2_bs['RSRP_Day_2'].isnull()) & (date_1_2_bs['RSRP_BS_Another_cell'] < rsrp_limit_1),
            (date_1_2_bs['RSRP_Day_1'].notnull()) & (date_1_2_bs['RSRP_Day_2'].isnull()) & (date_1_2_bs['RSRP_BS_Another_cell'].isnull()),
            (date_1_2_bs['RSRP_Day_1'] > date_1_2_bs['RSRP_Day_2'] + rsrp_delta_1) & (date_1_2_bs['RSRP_BS_Another_cell'].isnull()) & (date_1_2_bs['RSRP_Day_2'] < rsrp_limit_1),
            (date_1_2_bs['RSRP_Day_2'] > date_1_2_bs['RSRP_Day_1'] + rsrp_delta_2) & (date_1_2_bs['RSRP_BS_Another_cell'].isnull())& (date_1_2_bs['RSRP_Day_1'] < rsrp_limit_2),
            ]

        # create a list of the values we want to assign for each condition
        values = [-1, -1, 1, 1, 1, 1, -1, -1, -1, 1]

        # create a new column and use np.select to assign values to it using our lists as arguments
        date_1_2_bs['Coverage_Status_Cond1'] = np.select(conditions1, values)
        date_1_2_bs['Coverage_Status_Cond2'] = np.select(conditions2, values)

        # экспортим результирующую таблицу
        # date_1_2_bs.to_csv(str(cell) + '.csv')
        Coverage_Status_1 = date_1_2_bs['Coverage_Status_Cond1'].sum()
        points_nbr_1 = date_1_2_bs['Coverage_Status_Cond1'].count()
        coverage_koef_1 = round(
            100 * date_1_2_bs['Coverage_Status_Cond1'].sum() / date_1_2_bs['Coverage_Status_Cond1'].count(), 1)
        Coverage_Status_2 = date_1_2_bs['Coverage_Status_Cond2'].sum()
        points_nbr_2 = date_1_2_bs['Coverage_Status_Cond2'].count()
        coverage_koef_2 = round(
            100 * date_1_2_bs['Coverage_Status_Cond2'].sum() / date_1_2_bs['Coverage_Status_Cond2'].count(), 1)
        logging.info('{0}\t{1}\t{2}\t{3}\t{4}\t{5}\t{6}'.format(cell,
                                                                Coverage_Status_1,
                                                                points_nbr_1,
                                                                coverage_koef_1,
                                                                Coverage_Status_2,
                                                                points_nbr_2,
                                                                coverage_koef_2))
        # sys.exit()



coverage_check_for_cluster()